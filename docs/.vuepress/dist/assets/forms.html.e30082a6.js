import{_ as a,o as i,c as r,a as e,b as n,e as t,d as s,r as d}from"./app.4d3d1fb5.js";const h={},l=e("h1",{id:"forms",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#forms","aria-hidden":"true"},"#"),t(" Forms")],-1),c={href:"https://events.solidrock.io/admin/form-builder/forms",target:"_blank",rel:"noopener noreferrer"},u=t("Custom forms"),m=t(" accessible in the admin backend from 'Admin Console' > 'Form Builder' > 'Forms' are what you can optionally attach to a Ticket or Extra so that when added to an order the Lead Booker is then able to provide the requested information, be that required or optional."),f=s('<p>Forms can be re-used across multiple tickets and extra within the same event and even across events, so if you have a standard set of questions or information for tickets across your events you may set up 1 form and use it everywhere.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>There is no limit to the number fo forms you can create.</p></div><h2 id="creating-editing-a-form" tabindex="-1"><a class="header-anchor" href="#creating-editing-a-form" aria-hidden="true">#</a> Creating &amp; Editing a form</h2><h3 id="form-name" tabindex="-1"><a class="header-anchor" href="#form-name" aria-hidden="true">#</a> Form Name</h3><p>What you will see in the admin backend to understand what this form is for.</p><h3 id="form-submit-button-text" tabindex="-1"><a class="header-anchor" href="#form-submit-button-text" aria-hidden="true">#</a> Form Submit Button Text</h3><p>The text in the submit button that a Lead Booker will see when they are filling the form in (e.g. &#39;Submit&#39;, &#39;Save Information&#39;, &#39;Save&#39; etc).</p><h3 id="fields" tabindex="-1"><a class="header-anchor" href="#fields" aria-hidden="true">#</a> Fields</h3><p>Here you add which of Solidrock&#39;s default fields and your own custom fields should be added to the form.</p><p>You can determine the order of the fields by using the drag handle icon, specify if a field is required for the Ticket or Extra to been considered &#39;complete&#39; and if there are any conditional visbility rules associated.</p><div class="custom-container warning"><p class="custom-container-title">Updating fields in an existing form</p><p>You can update the fields within a custom form at any time however be aware that if you add/remove fields from a form that has been used for booked tickets that Solidrock is unable to retrospectively request information from a Lead Booker for fields they didn&#39;t previously have access to when they placed their booking.</p></div><h4 id="conditional-rules" tabindex="-1"><a class="header-anchor" href="#conditional-rules" aria-hidden="true">#</a> Conditional Rules</h4><p>There may be occassions where a field only makes sense based on the data provided in a previous field.</p><p>For example we may have a &#39;Do you have any dietary requirements?&#39; lightswitch field and a &#39;Please give more details about your dietary requirements&#39; text field. It makes sense to only show the latter if the first field is toggled on - indicating a &#39;Yes&#39;.</p><p>Conditional rules allow us to achieve this bahaviour.</p><p>Using the above example we would set the conditional rule fields on the &#39;Please give more details about your dietary requirements&#39; field to:</p><p><code>&#39;Do you have any dietary requirements?&#39;</code> | <code>&#39;Is equal to&#39;</code> | <code>Yes</code></p><div class="custom-container warning"><p class="custom-container-title">Hidden Fields</p><p>Fields hidden using the contional rules <strong>must</strong> not be required otherwise you run the risk of Lead Bookers facing validation errors on those invisible fields.</p></div>',18);function p(b,v){const o=d("ExternalLinkIcon");return i(),r("div",null,[l,e("p",null,[e("a",c,[u,n(o)]),m]),f])}var g=a(h,[["render",p],["__file","forms.html.vue"]]);export{g as default};
