import{_ as e,o as t,c as o,V as a}from"./chunks/framework.98960eec.js";const p=JSON.parse('{"title":"Forms","description":"","frontmatter":{},"headers":[],"relativePath":"guide/form-builder/forms.md","filePath":"guide/form-builder/forms.md"}'),i={name:"guide/form-builder/forms.md"},r=a('<h1 id="forms" tabindex="-1">Forms <a class="header-anchor" href="#forms" aria-label="Permalink to &quot;Forms&quot;">​</a></h1><p><a href="https://events.solidrock.io/admin/form-builder/forms" target="_blank" rel="noreferrer">Custom forms</a> accessible in the admin backend from &#39;Admin Console&#39; &gt; &#39;Form Builder&#39; &gt; &#39;Forms&#39; are what you can optionally attach to a Ticket or Extra so that when added to an order the Lead Booker is then able to provide the requested information, be that required or optional.</p><p>Forms can be re-used across multiple tickets and extra within the same event and even across events, so if you have a standard set of questions or information for tickets across your events you may set up 1 form and use it everywhere.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There is no limit to the number fo forms you can create.</p></div><h2 id="creating-editing-a-form" tabindex="-1">Creating &amp; Editing a form <a class="header-anchor" href="#creating-editing-a-form" aria-label="Permalink to &quot;Creating &amp; Editing a form&quot;">​</a></h2><h3 id="form-name" tabindex="-1">Form Name <a class="header-anchor" href="#form-name" aria-label="Permalink to &quot;Form Name&quot;">​</a></h3><p>What you will see in the admin backend to understand what this form is for.</p><h3 id="form-submit-button-text" tabindex="-1">Form Submit Button Text <a class="header-anchor" href="#form-submit-button-text" aria-label="Permalink to &quot;Form Submit Button Text&quot;">​</a></h3><p>The text in the submit button that a Lead Booker will see when they are filling the form in (e.g. &#39;Submit&#39;, &#39;Save Information&#39;, &#39;Save&#39; etc).</p><h3 id="fields" tabindex="-1">Fields <a class="header-anchor" href="#fields" aria-label="Permalink to &quot;Fields&quot;">​</a></h3><p>Here you add which of Solidrock&#39;s default fields and your own custom fields should be added to the form.</p><p>You can determine the order of the fields by using the drag handle icon, specify if a field is required for the Ticket or Extra to been considered &#39;complete&#39; and if there are any conditional visbility rules associated.</p><div class="warning custom-block"><p class="custom-block-title">Updating fields in an existing form</p><p>You can update the fields within a custom form at any time however be aware that if you add/remove fields from a form that has been used for booked tickets that Solidrock is unable to retrospectively request information from a Lead Booker for fields they didn&#39;t previously have access to when they placed their booking.</p></div><h4 id="conditional-rules" tabindex="-1">Conditional Rules <a class="header-anchor" href="#conditional-rules" aria-label="Permalink to &quot;Conditional Rules&quot;">​</a></h4><p>There may be occassions where a field only makes sense based on the data provided in a previous field.</p><p>For example we may have a &#39;Do you have any dietary requirements?&#39; lightswitch field and a &#39;Please give more details about your dietary requirements&#39; text field. It makes sense to only show the latter if the first field is toggled on - indicating a &#39;Yes&#39;.</p><p>Conditional rules allow us to achieve this bahaviour.</p><p>Using the above example we would set the conditional rule fields on the &#39;Please give more details about your dietary requirements&#39; field to:</p><p><code>&#39;Do you have any dietary requirements?&#39;</code> | <code>&#39;Is equal to&#39;</code> | <code>Yes</code></p><div class="warning custom-block"><p class="custom-block-title">Hidden Fields</p><p>Fields hidden using the contional rules <strong>must</strong> not be required otherwise you run the risk of Lead Bookers facing validation errors on those invisible fields.</p></div>',20),s=[r];function n(d,l,h,m,c,u){return t(),o("div",null,s)}const b=e(i,[["render",n]]);export{p as __pageData,b as default};
